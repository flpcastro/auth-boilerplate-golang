// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/signup": {
            "post": {
                "tags": ["User"],
                "description": "User Registration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "format": "string",
                        "schema": {
                            "$ref": "#/definitions/SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SignUpResponse"
                        }
                    },
                    "422": {
                        "description": "E-mail already registered",
                    }
                }
            } 
        },
        "/login": {
            "post": {
                "tags": ["User"],
                "description": "User Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "format": "string",
                        "schema": {
                            "$ref": "#/definitions/LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Email or password incorrect"
                    }
                }
            }
        },
        "/validate": {
            "get": {
                "tags": ["User"],
                "description": "Validates if the user is logged in (with token stored in cookies)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ValidateResponse"
                        }
                    },
                    "401": {
                        "description": "You are not logged in",
                    }
                }
            }
        }
    },
    "definitions": {
        "SignUpRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User Email",
                    "example": "test@email.com",
                },
                "password": {
                    "type": "string",
                    "description": "User Password",
                    "example": "password123",
                }
            }
        },
        "SignUpResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User Email",
                    "example": "test@email.com",
                },
                "password": {
                    "type": "string",
                    "description": "User Password",
                    "example": "password123",
                }
            }
        },
        "LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User Email",
                    "example": "test@email.com",
                },
                "password": {
                    "type": "string",
                    "description": "User Password",
                    "example": "password123",
                }
            }
        },
        "LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "description": "User Token",
                    "example": "4848471aca27135fc46008a2b8db0704"
                }
            }
        },
        "ValidateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "number",
                    "description": "User ID",
                    "example": "4"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Account creation date",
                    "example": "2023-03-08T18:04:01.199448-03:00"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Account update date",
                    "example": "2023-03-08T18:04:01.199448-03:00"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "Account delete date",
                    "example": "2023-03-08T18:04:01.199448-03:00"
                },
                "email": {
                    "type": "string",
                    "description": "User Email",
                    "example": "email@example.com"
                },
                "password": {
                    "type": "string",
                    "description": "User Password",
                    "example": "hashpassword"
                },
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
